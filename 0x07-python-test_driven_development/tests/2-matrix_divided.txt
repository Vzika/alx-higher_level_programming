"""
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


>>> matrix_divided([[2, 4, 6], [8, 10, 12]], 2)
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

>>> matrix_divided([[2.5, 4.6, 6.4], [8.1, 10.0, 12.5]], 5)
[[0.5, 0.92, 1.28], [1.62, 2.0, 2.5]]

>>> matrix_divided([[2, 4, 6], [8, 10, 12]], 2.5)
[[0.8, 1.6, 2.4], [3.2, 4.0, 4.8]]

>>> matrix_divided([[2.5, 4.0, 6.0], [8.5, 10.6, 12.3]], 2)
[[1.25, 2.0, 3.0], [4.25, 5.3, 6.15]]

>>> matrix_divided([[2, 4, 6], [8.5, 10.7, 12.0]], 2.5)
[[0.8, 1.6, 2.4], [3.4, 4.28, 4.8]]


========/////////////====================
testing for errors
==========//////////=====================

>>> matrix_divided([[2, 4, 6], [8, 10]], 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[2, 4, 6], [8, 10, 12, 40]], 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[2, 4, 6], [8, 10, 12]], 'A')
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix_divided([[2, 4, 6], [8, 10, 12]], "hi")
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix_divided([2, 4, 6], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(0, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, 3], [2, "hello", 8]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided("not a lists", 10)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

"""
